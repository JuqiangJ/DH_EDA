[
["index.html", "A Introduction to Eploratory Data Analysis with R Chapter 1 Prerequisites 1.1 Installing R and R studio 1.2 Installing libraries in R 1.3 Install packages and library packages 1.4 Programme", " A Introduction to Eploratory Data Analysis with R Juqiang Chen 2019-09-29 Chapter 1 Prerequisites This document is to accompany Eploratory Data Analysis with R tutorial for DH Downunder 2019 at the University of Newcastle, Australia, from 9-13 December. I am a speech scientist working on cross-language lexical tone perception and production. I have rich experience dealing with experimental data and I am keen to help others with data wrangling, data visualization and statistical modelling problems. I aspire to promote a streamlined workflow with R packages to improve data analysis efficiency in quantitative analysis in the field of social science and linguistics. If you have any questions about the tutorial, please e-mail me at: j.chen2@westernsydney.edu.au This workshop will show how to use data transformation and visualization to explore your data in a systematic way, or in a statistical term, exploratory data analysis. Participants will learn to generate questions about the data, search for answers by transforming, visualizing and modeling the dataset, and use what they learn to further refine the questions and/or generate new questions. The workshop will start by exploring variations in (categorical and continuous) one variable and move on to investigate covariations among two or three variables. Participants will learn to produce summary tables (calculating mean or standard deviation etc. of one or multiple variables by one or more variables) and will also learn to draw figures with ggplot2. This workshop builds on some knowledge of data wrangling. Therefore, it is desirable that participants should take the Introduction to data wrangling with R, if they have no such knowledge. Participants are welcomed to bring their own data and apply what they learn on the spot. Before we start our journey of data wrangling with R, you will need to install R on your laptop. R is multi-platform, which means you can install R on your PC or MAC. 1.1 Installing R and R studio Use this link [https://cloud.r-project.org/] to download R and select the proper version for your laptop. knitr::include_graphics(&quot;img/installr.jpg&quot;) Figure 1.1: Download R 1.2 Installing libraries in R RStudio is an integrated development environment, or IDE, for R programming. Download and install it from [http://www.rstudio.com/download.] The free version is poweful enough. 1.3 Install packages and library packages install.packages(“package_name”) library(package_name) 1.4 Programme Session 1 chapter 1 &amp; 2 Session 2 chapter 3, 4 &amp; 5 Session 3 chapter 3, 4 &amp; 5 "],
["intro.html", "Chapter 2 Basic data structures in R 2.1 Categorical vs. numeric variables 2.2 1D data structure: vectors 2.3 2D data structures: matrice and data frames 2.4 summary", " Chapter 2 Basic data structures in R Before we get our hands dirty in doing actual data analysis, it is desirable to first think about what types of variables and data structures we are dealing with. A variable is any characteristics, number, or quantity that can be measured or counted. A variable may also be called a data item. Age, sex, business income and expenses, country of birth, capital expenditure, class grades, eye colour and vehicle type are examples of variables. It is called a variable because the value may vary between data units in a population, and may change in value over time.(Australian Bureau of Statistics, ABS) Before we talk about data structures in R, let’s first think about how data can be categorized. 2.1 Categorical vs. numeric variables Categorical variables have values that describe a ‘quality’ or ‘characteristic’ of a data unit, like ‘what type’ or ‘which category’. Categorical variables fall into mutually exclusive (in one category or in another) and exhaustive (include all possible options) categories. Therefore, categorical variables are qualitative variables and tend to be represented by a non-numeric value. Categorical variables may be further described as ordinal or nominal: An ordinal variable is a categorical variable. Observations can take a value that can be logically ordered or ranked. The categories associated with ordinal variables can be ranked higher or lower than another, but do not necessarily establish a numeric difference between each category.In other words, the interval between levels of the variables are unknown. Examples of ordinal categorical variables include academic grades (i.e. A, B, C), clothing size (i.e. small, medium, large, extra large) and attitudes (i.e. strongly agree, agree, disagree, strongly disagree). For example, when doing a survey, participants will be asked to rate. The subjective measurements of this kind are often ordinal variables. E.g. a Likert ranking scale; level of education (“&lt; high school”, “high school”, “associate’s degree”). We can assign numbers to levels of an ordinal variable, and can order them, but we should bear in mind that these variable are not numeric. For example, “strongly agree” and “neutral” cannot average out to an “agree.”, even though you can assign 5 to “strong agree” and 3 to “neutral”. A nominal variable is a categorical variable. Observations can take a value that is not able to be organised in a logical sequence. Examples of nominal categorical variables include sex, business type, eye colour, religion and brand. The data collected for a categorical variable are qualitative data. Numeric variables have values that describe a measurable quantity as a number, like ‘how many’ or ‘how much’. Therefore numeric variables are quantitative variables.(ABS) It is also called Interval/ratio variables and the interval between numbers is equal: the interval between 1 kg and 2 kg is the same as between 3 kg and 4 kg. Numeric variables may be further described as either continuous or discrete: A continuous variable is a numeric variable. Observations can take any value between a certain set of real numbers. The value given to an observation for a continuous variable can include values as small as the instrument of measurement allows. Examples of continuous variables include height, time, age, and temperature.(ABS) A discrete variable is a numeric variable. Observations can take a value based on a count from a set of distinct whole values. A discrete variable cannot take the value of a fraction between one value and the next closest value. Examples of discrete variables include the number of registered cars, number of business locations, and number of children in a family, all of of which measured as whole units (i.e. 1, 2, 3 cars).(ABS) The data collected for a numeric variable are quantitative data. The variable type will determine (1) statistical analysis; (2) the way we summarize data with statistics and plots. knitr::include_graphics(&quot;img/variable.jpg&quot;) (#fig:variable_type)Download R Variables can be stored in R in different data types. Normial and ordinal variables can be stored as character or factors (with levels). Interval data are stored as numbers either as integer or numeric (real or decimal). If you have only one variable, you can store it in a vector. However, more often than not, you have a bunch of variables that should be stored or imported as a matrix or data frame. 2.2 1D data structure: vectors A vector is a sequence of data elements of the same basic type: integer, double, logical or character. All elements of a vector must be the same type. 2.2.1 Creating vectors a = 8:17 b &lt;- c(9, 10, 100, 38) c = c (TRUE, FALSE, TRUE, FALSE) c = c (T, F, T, F) d = c (&quot;TRUE&quot;, &quot;FALSE&quot;, &quot;FALSE&quot;) # You can change the type of a vector with as.vector function. as.vector(b, mode = &quot;character&quot;) ## [1] &quot;9&quot; &quot;10&quot; &quot;100&quot; &quot;38&quot; # When you put elements of different types in one vector, R will automatically change the type of some elements to keep the whole vector homogenous. e = c(9,10, &quot;ab&quot;, &quot;cd&quot;) f = c(10, 11, T, F) c () is a function in R. There are some other basic functions in R that you can play with to generate vectors. A = 9:20 + 1 B = seq (1, 10) C = seq (1, 20, by= 2) D = rep (5, 4) E = rep (c(1,2,3), 4) G = rep (c(1,2,3), each = 4) # Now that you have a vector, you can do some Maths. max(a) ## [1] 17 min(a) ## [1] 8 range(a) ## [1] 8 17 sum(a) ## [1] 125 mean(a) ## [1] 12.5 median(a) ## [1] 12.5 quantile(a) ## 0% 25% 50% 75% 100% ## 8.00 10.25 12.50 14.75 17.00 sd(a) ## [1] 3.02765 round(sd(a), 2) ## [1] 3.03 2.2.2 creating list objects We can put vectors of different types (e.g., number, logic or character) and lengths in a list object. list1 = list(a, b, c, d, e, f) list1 ## [[1]] ## [1] 8 9 10 11 12 13 14 15 16 17 ## ## [[2]] ## [1] 9 10 100 38 ## ## [[3]] ## [1] TRUE FALSE TRUE FALSE ## ## [[4]] ## [1] &quot;TRUE&quot; &quot;FALSE&quot; &quot;FALSE&quot; ## ## [[5]] ## [1] &quot;9&quot; &quot;10&quot; &quot;ab&quot; &quot;cd&quot; ## ## [[6]] ## [1] 10 11 1 0 # More often than not, we do not make list ourselves but have to deal with lists when we get outputs from stats models. 2.3 2D data structures: matrice and data frames Most of us have had some experience with the Excel spreadsheet. Data in a spreadsheet are arranged by rows and columns in a rectangular space. This is a typical 2 dimensional data structure. In R, we can have two ways of forming tabular data like a spreadsheet: the matrix and dataframe. A matrix is a collection of data elements arranged in a two-dimensional rectangular layout in which all the elements must be of the same type (e.g., numeric or character). Dataframe is similar to matrix in shape but only differs in that different types of data can co-exist in different columns. Thus, in data analysis, we use dataframes more often than matrix. # Let&#39;s generate a dataframe from scratch. id = seq(1, 40) gender = rep(c(&quot;male&quot;, &quot;female&quot;), 5) maths = rnorm(40, mean = 70, sd = 5) english = rnorm(40, mean = 80, sd = 9) music = rnorm(40, mean = 75, sd = 10) pe = rnorm(40, mean = 86, sd = 12) df1 = data.frame (id, gender, maths, english) Now let’s explore the data frame we just created. str(df1) ## &#39;data.frame&#39;: 40 obs. of 4 variables: ## $ id : int 1 2 3 4 5 6 7 8 9 10 ... ## $ gender : Factor w/ 2 levels &quot;female&quot;,&quot;male&quot;: 2 1 2 1 2 1 2 1 2 1 ... ## $ maths : num 62.9 66.4 68.5 75.4 72.2 ... ## $ english: num 80.4 73.8 69.6 88.7 80.4 ... summary(df1) ## id gender maths english ## Min. : 1.00 female:20 Min. :59.81 Min. :65.47 ## 1st Qu.:10.75 male :20 1st Qu.:67.15 1st Qu.:77.00 ## Median :20.50 Median :70.88 Median :80.59 ## Mean :20.50 Mean :70.42 Mean :81.38 ## 3rd Qu.:30.25 3rd Qu.:72.58 3rd Qu.:88.11 ## Max. :40.00 Max. :83.09 Max. :95.31 nrow(df1) ## [1] 40 ncol(df1) ## [1] 4 attributes(df1) ## $names ## [1] &quot;id&quot; &quot;gender&quot; &quot;maths&quot; &quot;english&quot; ## ## $class ## [1] &quot;data.frame&quot; ## ## $row.names ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 ## [24] 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 2.3.1 what if I want to change column names or add variable to the df? df2 = data.frame (id = id, gender = gender, maths = maths, english = english) df2 = cbind(df2, pe) colnames(df2) = c(&quot;ID&quot;, &quot;SEX&quot;,&quot;MATHS&quot;,&quot;ENGLISH&quot;,&quot;PE&quot;) head(df2) ## ID SEX MATHS ENGLISH PE ## 1 1 male 62.94909 80.40752 91.06741 ## 2 2 female 66.36799 73.76231 84.91701 ## 3 3 male 68.46500 69.63240 108.68219 ## 4 4 female 75.39550 88.68295 79.80965 ## 5 5 male 72.15650 80.38312 85.35978 ## 6 6 female 67.45631 78.34734 113.21709 2.3.2 Subsetting dataframes We all know how to select part of an Excel spreadsheet by clicking and moving our mouse. In R, when we want to select part of a dataframe, we use this formula, dataframe[row, column]. There are various ways we can use this formula and believe it or not, you will love them! # the complete dataset df2 ## ID SEX MATHS ENGLISH PE ## 1 1 male 62.94909 80.40752 91.06741 ## 2 2 female 66.36799 73.76231 84.91701 ## 3 3 male 68.46500 69.63240 108.68219 ## 4 4 female 75.39550 88.68295 79.80965 ## 5 5 male 72.15650 80.38312 85.35978 ## 6 6 female 67.45631 78.34734 113.21709 ## 7 7 male 63.48015 68.33354 98.43093 ## 8 8 female 71.22988 85.41294 87.14748 ## 9 9 male 78.21030 88.48541 93.88035 ## 10 10 female 61.54900 86.08458 79.45217 ## 11 11 male 72.44821 77.09976 74.24294 ## 12 12 female 70.75092 81.37752 80.54655 ## 13 13 male 69.81522 95.31480 89.86894 ## 14 14 female 69.12778 65.46783 83.19971 ## 15 15 male 59.81352 93.14477 62.25771 ## 16 16 female 65.11333 84.70131 67.84976 ## 17 17 male 73.25845 73.83405 84.53530 ## 18 18 female 72.14631 92.49389 88.07359 ## 19 19 male 64.32956 77.77248 101.24924 ## 20 20 female 69.72966 84.15071 114.08268 ## 21 21 male 70.66595 78.23849 79.60147 ## 22 22 female 72.34876 77.06610 84.60783 ## 23 23 male 67.03448 92.03494 82.91153 ## 24 24 female 73.88650 86.18086 68.65966 ## 25 25 male 77.99978 76.81171 74.56718 ## 26 26 female 67.18534 72.87460 79.86773 ## 27 27 male 71.01424 85.87876 88.76336 ## 28 28 female 71.58677 92.01391 85.11575 ## 29 29 male 77.74953 80.77482 84.98723 ## 30 30 female 77.50047 89.69614 107.04962 ## 31 31 male 72.20078 74.32219 91.39207 ## 32 32 female 69.04741 74.10059 107.94917 ## 33 33 male 83.08769 77.48155 89.73449 ## 34 34 female 74.08742 87.98211 99.97064 ## 35 35 male 70.23483 88.89830 86.98938 ## 36 36 female 65.72422 79.48428 87.32319 ## 37 37 male 72.11357 78.70252 65.57343 ## 38 38 female 71.17940 88.99933 76.57992 ## 39 39 male 65.34722 82.68863 95.79929 ## 40 40 female 72.98769 66.26498 92.16763 df2[2:5, ] # from row 2 to row 5 ## ID SEX MATHS ENGLISH PE ## 2 2 female 66.36799 73.76231 84.91701 ## 3 3 male 68.46500 69.63240 108.68219 ## 4 4 female 75.39550 88.68295 79.80965 ## 5 5 male 72.15650 80.38312 85.35978 df2[ , 1:2] # select column 1 to 2 ## ID SEX ## 1 1 male ## 2 2 female ## 3 3 male ## 4 4 female ## 5 5 male ## 6 6 female ## 7 7 male ## 8 8 female ## 9 9 male ## 10 10 female ## 11 11 male ## 12 12 female ## 13 13 male ## 14 14 female ## 15 15 male ## 16 16 female ## 17 17 male ## 18 18 female ## 19 19 male ## 20 20 female ## 21 21 male ## 22 22 female ## 23 23 male ## 24 24 female ## 25 25 male ## 26 26 female ## 27 27 male ## 28 28 female ## 29 29 male ## 30 30 female ## 31 31 male ## 32 32 female ## 33 33 male ## 34 34 female ## 35 35 male ## 36 36 female ## 37 37 male ## 38 38 female ## 39 39 male ## 40 40 female df2[ , c(&quot;ENGLISH&quot;, &quot;PE&quot;)] # select by column names ## ENGLISH PE ## 1 80.40752 91.06741 ## 2 73.76231 84.91701 ## 3 69.63240 108.68219 ## 4 88.68295 79.80965 ## 5 80.38312 85.35978 ## 6 78.34734 113.21709 ## 7 68.33354 98.43093 ## 8 85.41294 87.14748 ## 9 88.48541 93.88035 ## 10 86.08458 79.45217 ## 11 77.09976 74.24294 ## 12 81.37752 80.54655 ## 13 95.31480 89.86894 ## 14 65.46783 83.19971 ## 15 93.14477 62.25771 ## 16 84.70131 67.84976 ## 17 73.83405 84.53530 ## 18 92.49389 88.07359 ## 19 77.77248 101.24924 ## 20 84.15071 114.08268 ## 21 78.23849 79.60147 ## 22 77.06610 84.60783 ## 23 92.03494 82.91153 ## 24 86.18086 68.65966 ## 25 76.81171 74.56718 ## 26 72.87460 79.86773 ## 27 85.87876 88.76336 ## 28 92.01391 85.11575 ## 29 80.77482 84.98723 ## 30 89.69614 107.04962 ## 31 74.32219 91.39207 ## 32 74.10059 107.94917 ## 33 77.48155 89.73449 ## 34 87.98211 99.97064 ## 35 88.89830 86.98938 ## 36 79.48428 87.32319 ## 37 78.70252 65.57343 ## 38 88.99933 76.57992 ## 39 82.68863 95.79929 ## 40 66.26498 92.16763 df2[c(1,2,3), ] #select the first three rows ## ID SEX MATHS ENGLISH PE ## 1 1 male 62.94909 80.40752 91.06741 ## 2 2 female 66.36799 73.76231 84.91701 ## 3 3 male 68.46500 69.63240 108.68219 df2[seq(1, 40, 2), ] #select every other rows from 1 to 40 rows ## ID SEX MATHS ENGLISH PE ## 1 1 male 62.94909 80.40752 91.06741 ## 3 3 male 68.46500 69.63240 108.68219 ## 5 5 male 72.15650 80.38312 85.35978 ## 7 7 male 63.48015 68.33354 98.43093 ## 9 9 male 78.21030 88.48541 93.88035 ## 11 11 male 72.44821 77.09976 74.24294 ## 13 13 male 69.81522 95.31480 89.86894 ## 15 15 male 59.81352 93.14477 62.25771 ## 17 17 male 73.25845 73.83405 84.53530 ## 19 19 male 64.32956 77.77248 101.24924 ## 21 21 male 70.66595 78.23849 79.60147 ## 23 23 male 67.03448 92.03494 82.91153 ## 25 25 male 77.99978 76.81171 74.56718 ## 27 27 male 71.01424 85.87876 88.76336 ## 29 29 male 77.74953 80.77482 84.98723 ## 31 31 male 72.20078 74.32219 91.39207 ## 33 33 male 83.08769 77.48155 89.73449 ## 35 35 male 70.23483 88.89830 86.98938 ## 37 37 male 72.11357 78.70252 65.57343 ## 39 39 male 65.34722 82.68863 95.79929 2.4 summary Dimensions Homogenous Heterogeneous 1D Atomic Vector List 2D Matrix Data frame nD Array "],
["what-is-eda.html", "Chapter 3 What is EDA? 3.1 Data analysis workflow 3.2 Data wrangling", " Chapter 3 What is EDA? 3.1 Data analysis workflow A common workflow for data analysis involves importing data, cleaning data, transforming data, visualizing and modeling data for reports or papers. However, you may notice that it is not a linear process. In other words, there is magic way of understanding your data with a touch. Rather, it is a process where you need to try different wayd of tranforming, visualizing and modeling your data. Therefore, EDA is not a formal process with a strict set of rules, but an open process. Luckily, R offers a range of tools that can help us eaily summarize, visualize and model our data. In this workshop, we first explore variation within a variable and then move on to covariation among variables. knitr::include_graphics(&quot;img/DA_workflow.png&quot;) Figure 3.1: Data analysis workflow 3.2 Data wrangling Data wrangling (see the above figure in red box) involves some basic procedures (importing, tidying and transforming) in the early stage of data analysis. R,and relevant packages, tidyverse in particular, provide a number of functions that can help us dealing with data cleaning and tranformation. We will be learning how to use these functions in the follow sessions. "],
["variation.html", "Chapter 4 Variation 4.1 Categorical variable 4.2 Continous variable", " Chapter 4 Variation Variation is the tendency of the values of a variable to change from measurement to measurement. (Wickham &amp; Grolemund) 4.1 Categorical variable The best way to characterizing categorical variables is via the frequency. The frequency is the number of times a particular value for a variable (data item) has been observed to occur. How can we measure frequency? The frequency of a value can be expressed in different ways, depending on the purpose required. The absolute frequency describes the number of times a particular value for a variable (data item) has been observed to occur. Or simply put, counts. A relative frequency describes the number of times a particular value for a variable (data item) has been observed to occur in relation to the total number of values for that variable.It is calculated by dividing the absolute frequency by the total number of values for the variable. Ratios, rates, proportions and percentages are different ways of expressing relative frequencies. A ratiocompares the frequency of one value for a variable with another value for the variable. The first value identified in a ratio must be to the left of the colon (:) and the second value must be to the right of the colon (1st value : 2nd value). For example, in a total of 20 coin tosses where there are 12 heads and 8 tails, the ratio of heads to tails is 12:8. Alternatively, the ratio of tails to heads is 8:12. A rate is a measurement of one value for a variable in relation to another measured quantity. For example, in a total of 20 coin tosses where there are 12 heads and 8 tails, the rate is 12 heads per 20 coin tosses. Alternatively, the rate is 8 tails per 20 coin tosses. A proportion describes the share of one value for a variable in relation to a whole.It is calculated by dividing the number of times a particular value for a variable has been observed, by the total number of values in the population. For example, in a total of 20 coin tosses where there are 12 heads and 8 tails, the proportion of heads is 0.6 (12 divided by 20). Alternatively, the proportion of tails is 0.4 (8 divided by 20). A percentage expresses a value for a variable in relation to a whole population as a fraction of one hundred. The percentage total of an entire dataset should always add up to 100, as 100% represents the total, it is equal to the ‘whole’. A percentage is calculated by dividing the number of times a particular value for a variable has been observed, by the total number of observations in the population, then multiplying this number by 100. For example, in a total of 20 coin tosses where there are 12 heads and 8 tails, the percentage of heads is 60% (12 divided by 20, multiplied by 100). Alternatively, the percentage of tails is 40% (8 divided by 20, multiplied by 100). (ABS) Frequency distributions are visual displays that organise and present frequency counts so that the information can be interpreted more easily. How do we show a frequency distribution? A frequency distribution of data can be shown in a table or graph. Some common methods of showing frequency distributions include frequency tables, bar charts or histograms. Frequency Tables A frequency table is a simple way to display the number of occurrences of a particular value or characteristic. library(tidyverse) ## -- Attaching packages ------------------------------------------ tidyverse 1.2.1 -- ## v ggplot2 3.1.0 v purrr 0.3.2 ## v tibble 2.1.1 v dplyr 0.8.0.1 ## v tidyr 0.8.3 v stringr 1.4.0 ## v readr 1.3.1 v forcats 0.4.0 ## -- Conflicts --------------------------------------------- tidyverse_conflicts() -- ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() summary(diamonds) ## carat cut color clarity ## Min. :0.2000 Fair : 1610 D: 6775 SI1 :13065 ## 1st Qu.:0.4000 Good : 4906 E: 9797 VS2 :12258 ## Median :0.7000 Very Good:12082 F: 9542 SI2 : 9194 ## Mean :0.7979 Premium :13791 G:11292 VS1 : 8171 ## 3rd Qu.:1.0400 Ideal :21551 H: 8304 VVS2 : 5066 ## Max. :5.0100 I: 5422 VVS1 : 3655 ## J: 2808 (Other): 2531 ## depth table price x ## Min. :43.00 Min. :43.00 Min. : 326 Min. : 0.000 ## 1st Qu.:61.00 1st Qu.:56.00 1st Qu.: 950 1st Qu.: 4.710 ## Median :61.80 Median :57.00 Median : 2401 Median : 5.700 ## Mean :61.75 Mean :57.46 Mean : 3933 Mean : 5.731 ## 3rd Qu.:62.50 3rd Qu.:59.00 3rd Qu.: 5324 3rd Qu.: 6.540 ## Max. :79.00 Max. :95.00 Max. :18823 Max. :10.740 ## ## y z ## Min. : 0.000 Min. : 0.000 ## 1st Qu.: 4.720 1st Qu.: 2.910 ## Median : 5.710 Median : 3.530 ## Mean : 5.735 Mean : 3.539 ## 3rd Qu.: 6.540 3rd Qu.: 4.040 ## Max. :58.900 Max. :31.800 ## str(diamonds) ## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 53940 obs. of 10 variables: ## $ carat : num 0.23 0.21 0.23 0.29 0.31 0.24 0.24 0.26 0.22 0.23 ... ## $ cut : Ord.factor w/ 5 levels &quot;Fair&quot;&lt;&quot;Good&quot;&lt;..: 5 4 2 4 2 3 3 3 1 3 ... ## $ color : Ord.factor w/ 7 levels &quot;D&quot;&lt;&quot;E&quot;&lt;&quot;F&quot;&lt;&quot;G&quot;&lt;..: 2 2 2 6 7 7 6 5 2 5 ... ## $ clarity: Ord.factor w/ 8 levels &quot;I1&quot;&lt;&quot;SI2&quot;&lt;&quot;SI1&quot;&lt;..: 2 3 5 4 2 6 7 3 4 5 ... ## $ depth : num 61.5 59.8 56.9 62.4 63.3 62.8 62.3 61.9 65.1 59.4 ... ## $ table : num 55 61 65 58 58 57 57 55 61 61 ... ## $ price : int 326 326 327 334 335 336 336 337 337 338 ... ## $ x : num 3.95 3.89 4.05 4.2 4.34 3.94 3.95 4.07 3.87 4 ... ## $ y : num 3.98 3.84 4.07 4.23 4.35 3.96 3.98 4.11 3.78 4.05 ... ## $ z : num 2.43 2.31 2.31 2.63 2.75 2.48 2.47 2.53 2.49 2.39 ... library(Hmisc) ## Loading required package: lattice ## Loading required package: survival ## Loading required package: Formula ## ## Attaching package: &#39;Hmisc&#39; ## The following objects are masked from &#39;package:dplyr&#39;: ## ## src, summarize ## The following objects are masked from &#39;package:base&#39;: ## ## format.pval, units describe(diamonds) ## diamonds ## ## 10 Variables 53940 Observations ## --------------------------------------------------------------------------- ## carat ## n missing distinct Info Mean Gmd .05 .10 ## 53940 0 273 0.999 0.7979 0.5122 0.30 0.31 ## .25 .50 .75 .90 .95 ## 0.40 0.70 1.04 1.51 1.70 ## ## lowest : 0.20 0.21 0.22 0.23 0.24, highest: 4.00 4.01 4.13 4.50 5.01 ## --------------------------------------------------------------------------- ## cut ## n missing distinct ## 53940 0 5 ## ## Value Fair Good Very Good Premium Ideal ## Frequency 1610 4906 12082 13791 21551 ## Proportion 0.030 0.091 0.224 0.256 0.400 ## --------------------------------------------------------------------------- ## color ## n missing distinct ## 53940 0 7 ## ## Value D E F G H I J ## Frequency 6775 9797 9542 11292 8304 5422 2808 ## Proportion 0.126 0.182 0.177 0.209 0.154 0.101 0.052 ## --------------------------------------------------------------------------- ## clarity ## n missing distinct ## 53940 0 8 ## ## Value I1 SI2 SI1 VS2 VS1 VVS2 VVS1 IF ## Frequency 741 9194 13065 12258 8171 5066 3655 1790 ## Proportion 0.014 0.170 0.242 0.227 0.151 0.094 0.068 0.033 ## --------------------------------------------------------------------------- ## depth ## n missing distinct Info Mean Gmd .05 .10 ## 53940 0 184 0.999 61.75 1.515 59.3 60.0 ## .25 .50 .75 .90 .95 ## 61.0 61.8 62.5 63.3 63.8 ## ## lowest : 43.0 44.0 50.8 51.0 52.2, highest: 72.2 72.9 73.6 78.2 79.0 ## --------------------------------------------------------------------------- ## table ## n missing distinct Info Mean Gmd .05 .10 ## 53940 0 127 0.98 57.46 2.448 54 55 ## .25 .50 .75 .90 .95 ## 56 57 59 60 61 ## ## lowest : 43.0 44.0 49.0 50.0 50.1, highest: 71.0 73.0 76.0 79.0 95.0 ## --------------------------------------------------------------------------- ## price ## n missing distinct Info Mean Gmd .05 .10 ## 53940 0 11602 1 3933 4012 544 646 ## .25 .50 .75 .90 .95 ## 950 2401 5324 9821 13107 ## ## lowest : 326 327 334 335 336, highest: 18803 18804 18806 18818 18823 ## --------------------------------------------------------------------------- ## x ## n missing distinct Info Mean Gmd .05 .10 ## 53940 0 554 1 5.731 1.276 4.29 4.36 ## .25 .50 .75 .90 .95 ## 4.71 5.70 6.54 7.31 7.66 ## ## lowest : 0.00 3.73 3.74 3.76 3.77, highest: 10.01 10.02 10.14 10.23 10.74 ## --------------------------------------------------------------------------- ## y ## n missing distinct Info Mean Gmd .05 .10 ## 53940 0 552 1 5.735 1.269 4.30 4.36 ## .25 .50 .75 .90 .95 ## 4.72 5.71 6.54 7.30 7.65 ## ## Value 0.0 3.5 4.0 4.5 5.0 5.5 6.0 6.5 7.0 7.5 ## Frequency 7 5 1731 12305 7817 5994 6742 9260 4298 3402 ## Proportion 0.000 0.000 0.032 0.228 0.145 0.111 0.125 0.172 0.080 0.063 ## ## Value 8.0 8.5 9.0 9.5 10.0 10.5 32.0 59.0 ## Frequency 1635 652 69 14 6 1 1 1 ## Proportion 0.030 0.012 0.001 0.000 0.000 0.000 0.000 0.000 ## --------------------------------------------------------------------------- ## z ## n missing distinct Info Mean Gmd .05 .10 ## 53940 0 375 1 3.539 0.7901 2.65 2.69 ## .25 .50 .75 .90 .95 ## 2.91 3.53 4.04 4.52 4.73 ## ## Value 0.0 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 ## Frequency 20 1 2 3 8807 13809 9474 13682 5525 2352 ## Proportion 0.000 0.000 0.000 0.000 0.163 0.256 0.176 0.254 0.102 0.044 ## ## Value 5.5 6.0 6.5 7.0 8.0 32.0 ## Frequency 237 20 5 1 1 1 ## Proportion 0.004 0.000 0.000 0.000 0.000 0.000 ## --------------------------------------------------------------------------- contents(diamonds) ## ## Data frame:diamonds 53940 observations and 10 variables Maximum # NAs:0 ## ## ## Levels Class Storage ## carat double ## cut 5 ordered integer ## color 7 ordered integer ## clarity 8 ordered integer ## depth double ## table double ## price integer ## x double ## y double ## z double ## ## +--------+---------------------------------+ ## |Variable|Levels | ## +--------+---------------------------------+ ## | cut |Fair,Good,Very Good,Premium,Ideal| ## +--------+---------------------------------+ ## | color |D,E,F,G,H,I,J | ## +--------+---------------------------------+ ## | clarity|I1,SI2,SI1,VS2,VS1,VVS2,VVS1,IF | ## +--------+---------------------------------+ Categorical variables are usually stored as factors or characters. You can use count() function or bar chart to explore the distribution. A bar chart is a type of graph in which each column (plotted either vertically or horizontally) represents a categorical variable or a discrete ungrouped numeric variable. It is used to compare the frequency (count) for a category or characteristic with another category or characteristic.(ABS) How to interprate: In a bar chart, the bar height (if vertical) or length (if horizontal) shows the frequency for each category or characteristic. The distribution of the dataset is not important because the columns each represent an individual category or characteristic rather than intervals for a continuous measurement. Therefore, gaps are included between each bar and each bar can be arranged in any order without affecting the data. count(diamonds, cut) ## # A tibble: 5 x 2 ## cut n ## &lt;ord&gt; &lt;int&gt; ## 1 Fair 1610 ## 2 Good 4906 ## 3 Very Good 12082 ## 4 Premium 13791 ## 5 Ideal 21551 count(diamonds, color) ## # A tibble: 7 x 2 ## color n ## &lt;ord&gt; &lt;int&gt; ## 1 D 6775 ## 2 E 9797 ## 3 F 9542 ## 4 G 11292 ## 5 H 8304 ## 6 I 5422 ## 7 J 2808 ggplot(diamonds)+ geom_bar(aes(x = cut)) ggplot(diamonds)+ geom_bar(aes(x = color)) Try this with clarity! library(languageR) ## ## Attaching package: &#39;languageR&#39; ## The following object is masked _by_ &#39;.GlobalEnv&#39;: ## ## english summary(lexdec) ## Subject RT Trial Sex NativeLanguage ## A1 : 79 Min. :5.829 Min. : 23 F:1106 English:948 ## A2 : 79 1st Qu.:6.215 1st Qu.: 64 M: 553 Other :711 ## A3 : 79 Median :6.346 Median :106 ## C : 79 Mean :6.385 Mean :105 ## D : 79 3rd Qu.:6.502 3rd Qu.:146 ## I : 79 Max. :7.587 Max. :185 ## (Other):1185 ## Correct PrevType PrevCorrect Word ## correct :1594 nonword:855 correct :1542 almond : 21 ## incorrect: 65 word :804 incorrect: 117 ant : 21 ## apple : 21 ## apricot : 21 ## asparagus: 21 ## avocado : 21 ## (Other) :1533 ## Frequency FamilySize SynsetCount Length ## Min. :1.792 Min. :0.0000 Min. :0.6931 Min. : 3.000 ## 1st Qu.:3.951 1st Qu.:0.0000 1st Qu.:1.0986 1st Qu.: 5.000 ## Median :4.754 Median :0.0000 Median :1.0986 Median : 6.000 ## Mean :4.751 Mean :0.7028 Mean :1.3154 Mean : 5.911 ## 3rd Qu.:5.652 3rd Qu.:1.0986 3rd Qu.:1.6094 3rd Qu.: 7.000 ## Max. :7.772 Max. :3.3322 Max. :2.3026 Max. :10.000 ## ## Class FreqSingular FreqPlural DerivEntropy ## animal:924 Min. : 4.0 Min. : 0.0 Min. :0.0000 ## plant :735 1st Qu.: 23.0 1st Qu.: 19.0 1st Qu.:0.0000 ## Median : 69.0 Median : 49.0 Median :0.0370 ## Mean : 132.1 Mean :109.7 Mean :0.3856 ## 3rd Qu.: 146.0 3rd Qu.:132.0 3rd Qu.:0.6845 ## Max. :1518.0 Max. :854.0 Max. :2.2641 ## ## Complex rInfl meanRT SubjFreq ## complex: 210 Min. :-1.3437 Min. :6.245 Min. :2.000 ## simplex:1449 1st Qu.:-0.3023 1st Qu.:6.322 1st Qu.:3.160 ## Median : 0.1900 Median :6.364 Median :3.880 ## Mean : 0.2845 Mean :6.379 Mean :3.911 ## 3rd Qu.: 0.6385 3rd Qu.:6.420 3rd Qu.:4.680 ## Max. : 4.4427 Max. :6.621 Max. :6.040 ## ## meanSize meanWeight BNCw BNCc ## Min. :1.323 Min. :0.8244 Min. : 0.02229 Min. : 0.0000 ## 1st Qu.:1.890 1st Qu.:1.4590 1st Qu.: 1.64921 1st Qu.: 0.1625 ## Median :3.099 Median :2.7558 Median : 3.32071 Median : 0.6500 ## Mean :2.891 Mean :2.5516 Mean : 7.37800 Mean : 5.0351 ## 3rd Qu.:3.711 3rd Qu.:3.4178 3rd Qu.: 7.10943 3rd Qu.: 2.9248 ## Max. :4.819 Max. :4.7138 Max. :79.17324 Max. :83.1949 ## ## BNCd BNCcRatio BNCdRatio ## Min. : 0.000 Min. :0.00000 Min. :0.0000 ## 1st Qu.: 1.188 1st Qu.:0.09673 1st Qu.:0.5551 ## Median : 3.800 Median :0.27341 Median :0.9349 ## Mean : 12.995 Mean :0.45834 Mean :1.5428 ## 3rd Qu.: 10.451 3rd Qu.:0.55550 3rd Qu.:2.1315 ## Max. :241.561 Max. :8.29545 Max. :6.3458 ## summary(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 ## 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 ## Median :5.800 Median :3.000 Median :4.350 Median :1.300 ## Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 ## 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 ## Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 ## Species ## setosa :50 ## versicolor:50 ## virginica :50 ## ## ## 4.2 Continous variable A continuous variable can take any of an infinite set of ordered values. You can use a histogram and other descriptive stats to characterize its distribution. A histogram is a type of graph in which each column represents a numeric variable, in particular that which is continuous and/or grouped.It shows the distribution of all observations in a quantitative dataset. It is useful for describing the shape, centre and spread to better understand the distribution of the dataset. How to interprate: The height of the column shows the frequency for a specific range of values. Columns are usually of equal width, however a histogram may show data using unequal ranges (intervals) and therefore have columns of unequal width. The values represented by each column must be mutually exclusive and exhaustive. Therefore, there are no spaces between columns and each observation can only ever belong in one column. It is important that there is no ambiguity in the labelling of the intervals on the x-axis for continuous or grouped data (e.g. 0 to less than 10, 10 to less than 20, 20 to less than 30). # histogram ggplot(diamonds)+ geom_histogram(aes(carat), binwidth = 0.1) # histogram zoom in y axsis ggplot(diamonds)+ geom_histogram(aes(carat), binwidth = 0.1)+ coord_cartesian(ylim = c(0,50)) # histogram zoom in x axsis ggplot(diamonds[ which(diamonds$carat &lt; 3), ])+ geom_histogram(aes(carat), binwidth = 0.1) diamonds%&gt;% filter(carat &lt;3)%&gt;% ggplot()+ geom_histogram(aes(carat), binwidth = 0.1) # density plot ggplot(diamonds,aes(carat))+ geom_density(kernel = &quot;gaussian&quot;) # area ggplot(diamonds,aes(carat))+ geom_area(stat = &quot;bin&quot;) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. # dotplot ggplot(diamonds,aes(carat))+ geom_dotplot() ## `stat_bindot()` using `bins = 30`. Pick better value with `binwidth`. # freqpoly ggplot(diamonds, aes(carat))+ geom_freqpoly() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 4.2.1 Five-number summary The five-number summary is a set of descriptive statistics that provide information about a dataset. It consists of the five most important sample percentiles: the sample minimum (smallest observation) the lower quartile or first quartile the median (the middle value) the upper quartile or third quartile the sample maximum (largest observation) The five-number summary provides a concise summary of the distribution of the observations. Reporting five numbers avoids the need to decide on the most appropriate summary statistic. The five-number summary gives information about the location (from the median), spread (from the quartiles) and range (from the sample minimum and maximum) of the observations. Since it reports order statistics (rather than, say, the mean) the five-number summary is appropriate for ordinal measurements, as well as interval and ratio measurements. (from wikipedia) How to Find a Five-Number Summary: Step 1: Put your numbers in ascending order (from smallest to largest). For this particular data set, the order is: &gt; Example: 1,2,5,6,7,9,12,15,18,19,27. Step 2: Find the minimum and maximum for your data set. Now that your numbers are in order, this should be easy to spot. In the example in step 1, the minimum (the smallest number) is 1 and the maximum (the largest number) is 27. Step 3: Find the median. The median is the middle number. If you aren’t sure how to find the median, see: How to find the mean mode and median. Step 4: Place parentheses around the numbers above and below the median.(This is not technically necessary, but it makes Q1 and Q3 easier to find). (1,2,5,6,7),9,(12,15,18,19,27). Step 5: Find Q1 and Q3. Q1 can be thought of as a median in the lower half of the data, and Q3 can be thought of as a median for the upper half of data. (1,2,5,6,7), 9, ( 12,15,18,19,27). -Step 6: Write down your summary found in the above steps. minimum=1, Q1 =5, median=9, Q3=18, and maximum=27. summary(diamonds$carat) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.2000 0.4000 0.7000 0.7979 1.0400 5.0100 4.2.2 Boxplot &amp; violin plot It is possible to quickly compare several sets of observations by comparing their five-number summaries, which can be represented graphically using a boxplot. In descriptive statistics, a boxplot is a method for graphically depicting groups of numerical data through their quartiles. Boxplots may also have lines extending vertically from the boxes (whiskers) indicating variability outside the upper and lower quartiles, hence the terms box-and-whisker plot and box-and-whisker diagram. Outliers may be plotted as individual points. The spacings between the different parts of the box indicate the degree of dispersion (spread) and skewness in the data, and show outliers. Box plots can be drawn either horizontally or vertically. Box plots received their name from the box in the middle. box plots typically graph six data points: The lowest value, excluding outliers The first quartile (this is the 25th percentile, or median of all the numbers below the median) The median value (equivalent to the 50th percentile) The third quartile (this is the 75th percentile, or median of all the numbers above the median) The highest value, excluding outliers Outliers knitr::include_graphics(&quot;img/whatsaboxplot.png&quot;) Figure 4.1: Boxplot #source:https://mode.com/blog/how-to-make-box-and-whisker-plot-sql # r base function boxplot(diamonds$carat) #ggplot version ggplot(diamonds, aes(x=&quot;carat&quot;, y=carat))+ geom_boxplot() A violin plot is a method of plotting numeric data. It is similar to a boxplot, with the addition of a rotated kernel density plot on each side. Violin plots are similar to boxplots. Typically a violin plot will include all the data that is in a box plot: a marker for the median of the data; a box or marker indicating the interquartile range; and possibly all sample points, if the number of samples is not too high. knitr::include_graphics(&quot;img/violinplot.png&quot;) Figure 4.2: Violin plot #source:https://mode.com/blog/violin-plot-examples So a violin plot is more informative than a plain box plot. While a box plot only shows summary statistics such as mean/median and interquartile ranges, the violin plot shows the full distribution of the data. The difference is particularly useful when the data distribution is multimodal (more than one peak). In this case a violin plot shows the presence of different peaks, their position and relative amplitude. #violin plot ggplot(diamonds, aes(x=&quot;carat&quot;, y=carat))+ geom_violin() ggplot(diamonds, aes(x=&quot;price&quot;, y=price))+ geom_violin() 4.2.3 QQ Plots QQ Plots (Quantile-Quantile plots) are plots of two quantiles against each other. A quantile is a fraction where certain values fall below that quantile. For example, the median is a quantile where 50% of the data fall below that point and 50% lie above it. The purpose of QQ plots is to find out if two sets of data come from the same distribution. A 45 degree angle is plotted on the Q Q plot; if the two data sets come from a common distribution, the points will fall on that reference line.(from Wikipedia) # Solution 1 qplot(sample = carat, data = diamonds) # solution 2 ggplot(diamonds)+ geom_qq(aes(sample = carat))+ geom_qq_line(aes(sample = carat)) ### The measures of central tendency? (ABS) A measure of central tendency (also referred to as measures of centre or central location) is a summary measure that attempts to describe a whole set of data with a single value that represents the middle or centre of its distribution. There are three main measures of central tendency: the mode, the median and the mean. Each of these measures describes a different indication of the typical or central value in the distribution. The mode is the most commonly occurring value in a distribution. Consider this dataset showing the retirement age of 11 people, in whole years: 54, 54, 54, 55, 56, 57, 57, 58, 58, 60, 60 Advantage of the mode: The mode has an advantage over the median and the mean as it can be found for both numerical and categorical (non-numerical) data. Limitations of the mode: In some distributions, the mode may not reflect the centre of the distribution very well. it is easy to see that the centre of the distribution is 57 years, but the mode is lower, at 54 years. 54, 54, 54, 55, 56, 57, 57, 58, 58, 60, 60 more than one mode for the same distribution of data, (bi-modal, or multi-modal). The presence of more than one mode can limit the ability of the mode in describing the centre or typical value of the distribution because a single value to describe the centre cannot be identified. In some cases, particularly where the data are continuous, the distribution may have no mode at all (i.e. if all values are different).In cases such as these, it may be better to consider using the median or mean, or group the data in to appropriate intervals, and find the modal class. The median is the middle value in distribution when the values are arranged in ascending or descending order. The median divides the distribution in half (there are 50% of observations on either side of the median value). In a distribution with an odd number of observations, the median value is the middle value. 54, 54, 54, 55, 56, 57, 57, 58, 58, 60, 60 When the distribution has an even number of observations, the median value is the mean of the two middle values. In the following distribution, the two middle values are 56 and 57, therefore the median equals 56.5 years: 52, 54, 54, 54, 55, 56, 57, 57, 58, 58, 60, 60 Advantage of the median: The median is less affected by outliers and skewed data than the mean, and is usually the preferred measure of central tendency when the distribution is not symmetrical. Limitation of the median: The median cannot be identified for categorical nominal data, as it cannot be logically ordered. The mean is the sum of the value of each observation in a dataset divided by the number of observations. This is also known as the arithmetic average. Looking at the retirement age distribution again: 54, 54, 54, 55, 56, 57, 57, 58, 58, 60, 60 The mean is 56.6 years. Advantage of the mean: The mean can be used for both continuous and discrete numeric data. Limitations of the mean: The mean cannot be calculated for categorical data, as the values cannot be summed. As the mean includes every value in the distribution the mean is influenced by outliers and skewed distributions. What else do I need to know about the mean? The population mean is indicated by the Greek symbol µ (pronounced ‘mu’). When the mean is calculated on a distribution from a sample it is indicated by the symbol x̅ (pronounced X-bar). 4.2.4 How does the shape of a distribution influence the Measures of Central Tendency? 4.2.4.1 Symmetrical distributions: When a distribution is symmetrical, the mode, median and mean are all in the middle of the distribution. The following graph shows a larger retirement age dataset with a distribution which is symmetrical. The mode, median and mean all equal 58 years. hist(rbeta(10000,5,2)) hist(rbeta(10000,2,5)) hist(rbeta(10000,5,5)) knitr::include_graphics(&quot;img/normal.jpg&quot;) Figure 4.3: distribution knitr::include_graphics(&quot;img/right.jpg&quot;) Figure 4.3: distribution knitr::include_graphics(&quot;img/left.jpg&quot;) Figure 4.3: distribution #source:https://mode.com/blog/violin-plot-examples 4.2.4.2 Skewed distributions: When a distribution is skewed the mode remains the most commonly occurring value, the median remains the middle value in the distribution, but the mean is generally ‘pulled’ in the direction of the tails. In a skewed distribution, the median is often a preferred measure of central tendency, as the mean is not usually in the middle of the distribution. A distribution is said to be positively or right skewed when the tail on the right side of the distribution is longer than the left side. In a positively skewed distribution it is common for the mean to be ‘pulled’ toward the right tail of the distribution. Although there are exceptions to this rule, generally, most of the values, including the median value, tend to be less than the mean value. The following graph shows a larger retirement age data set with a distribution which is right skewed. The data has been grouped into classes, as the variable being measured (retirement age) is continuous. The mode is 54 years, the modal class is 54-56 years, the median is 56 years and the mean is 57.2 years. A distribution is said to be negatively or left skewed when the tail on the left side of the distribution is longer than the right side. In a negatively skewed distribution, it is common for the mean to be ‘pulled’ toward the left tail of the distribution. Although there are exceptions to this rule, generally, most of the values, including the median value, tend to be greater than the mean value. The following graph shows a larger retirement age dataset with a distribution which left skewed. The mode is 65 years, the modal class is 63-65 years, the median is 63 years and the mean is 61.8 years. ### Unusual values unusual = diamonds %&gt;% filter(y &lt; 3 | y &gt; 20)%&gt;% arrange(y) unusual ## # A tibble: 9 x 10 ## carat cut color clarity depth table price x y z ## &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 Very Good H VS2 63.3 53 5139 0 0 0 ## 2 1.14 Fair G VS1 57.5 67 6381 0 0 0 ## 3 1.56 Ideal G VS2 62.2 54 12800 0 0 0 ## 4 1.2 Premium D VVS1 62.1 59 15686 0 0 0 ## 5 2.25 Premium H SI2 62.8 59 18034 0 0 0 ## 6 0.71 Good F SI2 64.1 60 2130 0 0 0 ## 7 0.71 Good F SI2 64.1 60 2130 0 0 0 ## 8 0.51 Ideal E VS1 61.8 55 2075 5.15 31.8 5.12 ## 9 2 Premium H SI2 58.9 57 12210 8.09 58.9 8.06 # drop the entire row with the strange values diamonds_new = diamonds%&gt;% filter(between(y,3,20)) head(arrange(diamonds_new,y)) ## # A tibble: 6 x 10 ## carat cut color clarity depth table price x y z ## &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.2 Premium D VS2 62.3 60 367 3.73 3.68 2.31 ## 2 0.2 Premium F VS2 62.6 59 367 3.73 3.71 2.33 ## 3 0.2 Very Good E VS2 63.4 59 367 3.74 3.71 2.36 ## 4 0.2 Premium D VS2 61.7 60 367 3.77 3.72 2.31 ## 5 0.2 Ideal E VS2 62.2 57 367 3.76 3.73 2.33 ## 6 0.2 Premium E SI2 60.2 62 345 3.79 3.75 2.27 # replace the unusual values with missing values diamonds_replace = diamonds %&gt;% mutate(y2 = ifelse(y&lt;3 | y&gt; 20, NA, y)) head(arrange(diamonds_replace, y )) ## # A tibble: 6 x 11 ## carat cut color clarity depth table price x y z y2 ## &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 Very Good H VS2 63.3 53 5139 0 0 0 NA ## 2 1.14 Fair G VS1 57.5 67 6381 0 0 0 NA ## 3 1.56 Ideal G VS2 62.2 54 12800 0 0 0 NA ## 4 1.2 Premium D VVS1 62.1 59 15686 0 0 0 NA ## 5 2.25 Premium H SI2 62.8 59 18034 0 0 0 NA ## 6 0.71 Good F SI2 64.1 60 2130 0 0 0 NA "],
["covariation.html", "Chapter 5 Covariation 5.1 Categorical + continuous variable 5.2 Two categorical variables 5.3 Two continuous variables", " Chapter 5 Covariation If variation describes the behaviors within a variable, covariation describes the behavior between variables. Covariation is the tendency for the values of two or more variables to vary together in a related way. 5.1 Categorical + continuous variable library(tidyverse) ggplot(diamonds, aes(price))+ geom_freqpoly(binwidth = 500) ggplot(diamonds, aes(price))+ geom_freqpoly(aes(color = cut), binwidth = 500) # standardized count where the area under each frequency polygon is one ggplot(diamonds, aes(x = price, y = ..density..))+ geom_freqpoly(aes(color = cut), binwidth = 500) # boxplot ggplot(diamonds, aes(cut, price))+ geom_boxplot() model = model name displ = engine displacement, in litres year = year of manufacture cyl = number of cylinders trans = type of transmission drv =&gt; f = front-wheel drive, r = rear wheel drive, 4 = 4wd cty = city miles per gallon hwy = highway miles per gallon fl = fuel type class = “type” of car summary(mpg) ## manufacturer model displ year ## Length:234 Length:234 Min. :1.600 Min. :1999 ## Class :character Class :character 1st Qu.:2.400 1st Qu.:1999 ## Mode :character Mode :character Median :3.300 Median :2004 ## Mean :3.472 Mean :2004 ## 3rd Qu.:4.600 3rd Qu.:2008 ## Max. :7.000 Max. :2008 ## cyl trans drv cty ## Min. :4.000 Length:234 Length:234 Min. : 9.00 ## 1st Qu.:4.000 Class :character Class :character 1st Qu.:14.00 ## Median :6.000 Mode :character Mode :character Median :17.00 ## Mean :5.889 Mean :16.86 ## 3rd Qu.:8.000 3rd Qu.:19.00 ## Max. :8.000 Max. :35.00 ## hwy fl class ## Min. :12.00 Length:234 Length:234 ## 1st Qu.:18.00 Class :character Class :character ## Median :24.00 Mode :character Mode :character ## Mean :23.44 ## 3rd Qu.:27.00 ## Max. :44.00 ggplot(mpg)+ geom_boxplot(aes(x = reorder(class, hwy, FUN = median), y = hwy)) ggplot(mpg)+ geom_boxplot(aes(x = reorder(class, hwy, FUN = median), y = hwy))+ coord_flip() 5.2 Two categorical variables ggplot(diamonds)+ geom_count(aes(cut, color)) diamonds%&gt;% count(color, cut) ## # A tibble: 35 x 3 ## color cut n ## &lt;ord&gt; &lt;ord&gt; &lt;int&gt; ## 1 D Fair 163 ## 2 D Good 662 ## 3 D Very Good 1513 ## 4 D Premium 1603 ## 5 D Ideal 2834 ## 6 E Fair 224 ## 7 E Good 933 ## 8 E Very Good 2400 ## 9 E Premium 2337 ## 10 E Ideal 3903 ## # ... with 25 more rows diamonds%&gt;% count(color, cut)%&gt;% ggplot(aes(color, cut))+ geom_tile(aes(fill=n)) #install.packages(&quot;seriation&quot;) 5.3 Two continuous variables ggplot(diamonds)+ geom_point(aes(carat, price)) # add transparency ggplot(diamonds)+ geom_point(aes(carat, price), alpha = 1/100) # bin two variables ggplot(diamonds)+ geom_bin2d(aes(carat, price)) #install.packages(&quot;hexbin&quot;) ggplot(diamonds)+ geom_hex(aes(carat, price)) #bin one variable ggplot(diamonds,aes(carat, price))+ geom_boxplot(aes(group = cut_width(carat, 0.1))) ggplot(diamonds,aes(carat, price))+ geom_boxplot(aes(group = cut_width(carat, 0.5))) "],
["simple-modeling.html", "Chapter 6 Simple modeling", " Chapter 6 Simple modeling Patterns in the data provide clues about relationship or covariation. Models are a tool for extracting patterns out of data. ggplot(faithful)+ geom_point(aes(eruptions, waiting)) "],
["build-your-own-function.html", "Chapter 7 Build your own function", " Chapter 7 Build your own function function_name = function(input){ do thing 1 do thing 2 return(output) } "],
["resources.html", "Chapter 8 Resources", " Chapter 8 Resources "]
]
